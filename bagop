#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use File::Basename;
use File::Find;
use File::Temp;
use Cwd;
use Getopt::Long qw(:config bundling); 
use Storable;
use Sys::Hostname;
use Text::Abbrev;

my ($prg_name, $host_name, $usage);

$prg_name  = File::Basename::basename($0);
$host_name = (split /\./, Sys::Hostname::hostname)[0];

# >>>>>>>>>>>>>>>>>>>>>>>>>>> OPTIONS <<<<<<<<<<<<<<<<<<<<<<<<<<<

my ($abr_hash, $cmd);

Getopt::Long::GetOptions(
    "dest|dst=s"       => \$opt::dest,
    "dryrun|dry-run|d" => \$opt::dryrun,
    "quiet|q"          => \$opt::quiet,
);

set_dest();

$abr_hash = Text::Abbrev::abbrev qw(add delete commit status);
$cmd      = shift @ARGV       or ::exit_usage();
$cmd      = $abr_hash->{$cmd} or ::exit_usage();

if ($cmd eq "add") {
    bagop_add(\@ARGV);
} elsif ($cmd eq "delete") {
    bagop_delete(\@ARGV);
} elsif ($cmd eq "commit") {
    bagop_commit()
} elsif ($cmd eq "status") {
    bagop_status($ARGV[0]);
} else {
    die "This should not happen";
} 

# >>>>>>>>>>>>>>>>>>>>>>>>>>> SUBROUTINES <<<<<<<<<<<<<<<<<<<<<<<<<<<

# Set and check the --dest dir
sub set_dest
{
    $opt::dest ||= "$ENV{'HOME'}/backup/bagop";

    if($opt::dest =~ /:$/)
    {
        # --dest host: => host:.
        $opt::dest .= ".";
    }

    unless (-d $opt::dest)
    {
        ::error(qq(--dest $opt::dest: No such file or directory\n));
    }
}

# Print usage and exit.
sub exit_usage
{
    print <<"USAGE";
$prg_name [options] add <files> | delete <files> | commit | status [dir]
   options:   [--dest [[user@]host:][dir]]
              [--dryrun|-d]
              [--quiet|-q]

type 'man $prg_name' for help.

USAGE

    exit(1);
}

# Add files to backup.
sub bagop_add
{
    my ($paths,   # List of paths to add.
    ) = @_;

    my ($db, $path, $abs_path);

    $paths = paths_expand($paths);

    $db = db_retrieve();

    foreach $path (@{$paths})
    {
        $abs_path = File::Spec->rel2abs($path);

        if (exists $db->{$abs_path})
        {
            ::warning(qq(File already in backup -> $abs_path\n));
        }
        elsif (-l $abs_path)
        {
            ::warning(qq(Skipping symbolic link -> $abs_path\n));
        }
        elsif (-f $abs_path or -d $abs_path)
        {
            if (! -r $abs_path)
            {
                ::warning(qq(Permission denied -> $abs_path\n));
            }
            else
            {
                $db->{$abs_path} = {'lstat' => [lstat($abs_path)], status => 'NEW'};
                print STDERR qq(Added $abs_path\n) unless $opt::quiet;
            }
        }
        else
        {
            ::error(qq{No such file or directory -> "$abs_path"\n});
        }
    }

    db_store($db);
}

# Delete a file from backup.
sub bagop_delete
{
    my ($paths,   # List of paths to delete.
    ) = @_;

    my ($db, $path, $abs_path);

    $paths = paths_expand($paths);

    $db = db_retrieve();

    foreach $path (@{$paths})
    {
        $abs_path = File::Spec->rel2abs($path);

        if (exists $db->{$abs_path}) {
            $db->{$abs_path}->{'status'} = "DEL";
            print STDERR qq(Deleted $abs_path\n) unless $opt::quiet;
        }
        else {
            ::warning(qq(No such file or directory -> "$abs_path"\n));
        }
    }

    db_store($db);
}

# Backup files.
sub bagop_commit
{
    my ($db);

    $db = db_retrieve();

    bagop_commit_delete($db);
    bagop_commit_update($db);

    db_store($db);
    db_commit();
}

# Deleted files from database and destination.
sub bagop_commit_delete
{
    my ($db,   # Database.
    ) = @_;

    my (@files, $file, @cmd);

    @files = sort grep { $db->{$_}->{'status'} eq 'DEL' } keys %{$db};

    foreach $file (@files)
    {
        unless ($opt::dryrun)
        {
            # FIXME
            # @cmd = "ssh username@domain.com 'rm /some/where/some_file.war'"
            # system(@cmd) == 0 or ::error(qq(Command -> @cmd failed: $?));

            delete $db->{$file};
        }
    }
}

# Update the backup in database and destination.
sub bagop_commit_update
{
    my ($db,   # Database.
    ) = @_;

    my ($tmp_fh, $tmp_file, @files, $file, @cmd);

    ($tmp_fh, $tmp_file) = File::Temp::tempfile(UNLINK => 1);

    @files = sort keys %{$db};

    map { print $tmp_fh "$_\n" if (-f $_ or -d $_) } @files;

    push @cmd, "rsync";
    push @cmd, "--verbose" unless $opt::quiet;
    push @cmd, "--dry-run" if     $opt::dryrun;
    push @cmd, "--update";
    push @cmd, "--files-from=$tmp_file";
    push @cmd, "/";          # source
    push @cmd, $opt::dest;   # destination

    system(@cmd) == 0 or ::error(qq(Command -> @cmd failed: $?));

    unless ($opt::dryrun)
    {
        foreach $file (@files)
        {
            if (-f $file or -d $file)
            {
                $db->{$file}->{'lstat'}  = [lstat($file)];
                $db->{$file}->{'status'} = 'OK';
            }
        }
    }
}

# Collect and print backup stats.
sub bagop_status
{
    my ($rel_base   # relative base path to show status from
       ) = @_;

    my ($db, @paths, $path, $rel_path, @stats_db, @stats_file, $size_db,
        $size_file, $mtime_db, $mtime_file, $status, $time, $size, $abs_base,
        @table, $row, %stats);

    $abs_base = $rel_base ? Cwd::realpath($rel_base) : Cwd::getcwd;
    $db       = db_retrieve();
    @paths    = sort keys %{$db};

    foreach $path (@paths)
    {
        $rel_path = File::Spec->abs2rel($path, $abs_base);

        next if $rel_path =~ /^\.\.\//;

        @stats_db = @{$db->{$path}->{'lstat'}};
        $size_db  = $stats_db[7];
        $mtime_db = $stats_db[9];

        $status   = $db->{$path}->{'status'};

        if (-f $path or -d $path)
        {
            @stats_file = lstat($path);
            $size_file  = $stats_file[7];
            $mtime_file = $stats_file[9];

            if ($status ne 'NEW' and $status ne 'DEL' )
            {
                if ($size_db == $size_file and $mtime_db == $mtime_file) {
                    $status = "OK";
                } else {
                    $status = "OLD";
                }
            }

            $size = $size_file;
            $time = scalar localtime $mtime_file;
        }
        else
        {
            $status = "MIS";

            $time = scalar localtime $mtime_db;
            $size = $size_db;
        }

        push @table, [$status, $time, $size, $rel_path];
    }

    @paths = glob ("$abs_base/*");

    foreach $path (@paths)
    {
        next if exists $db->{$path};

        $rel_path = File::Spec->abs2rel($path, $abs_base);

        $status     = "?";
        @stats_file = lstat($path);
        $size_file  = $stats_file[7];
        $mtime_file = $stats_file[9];

        $time = scalar localtime $mtime_file;
        $size = $size_file;

        push @table, [$status, $time, $size, $rel_path];
    }

    @table = sort { $a->[-1] cmp $b->[-1] } @table;

    %stats = (
        '?'   => 0,
        'OK'  => 0,
        'NEW' => 0,
        'OLD' => 0,
        'MIS' => 0
    );

    printf("%-8s %-25s %12s %6s\n", "Status", "Last modified", "Size", "Path");

    foreach $row (@table)
    {
        printf("%-8s %-25s % 12s   %s\n", @{$row});

        $stats{$row->[0]}++;
    }

    printf("Status:\t?: %d\tOK: %d\tNEW: %d\tOLD: %d\tMIS: %d\n", $stats{'?'}, $stats{'OK'}, $stats{'NEW'}, $stats{'OLD'}, $stats{'MIS'});
}

# Given a list of relative paths to files and directories expand the
# directories recursively.
sub paths_expand
{
    my ($paths,   # List of paths to expand.
    ) = @_;

    my ($path, @paths);

    foreach $path (@{$paths})
    {
        push @paths, $path;

        if (-d $path) {
            push @paths, @{paths_expand([glob("$path/*")])};
        }
    }

    return wantarray ? @paths : \@paths;
}

# Store the backup db to file.
sub db_store
{
    my ($db,         # Data
    ) = @_;

    Storable::lock_store($db, db_filename());
}

# Commit the backup using rsync.
sub db_commit
{
    my ($basefile, $cachedir, $dbfile, @cmd);

    $basefile = $opt::dest;
    $basefile =~ s/[^a-z0-9]/_/gi;
    $cachedir = $ENV{'HOME'}."/.bagop/cache";
    $dbfile   = "$cachedir/$basefile";

    @cmd = "rsync $dbfile $opt::dest/.$basefile 2>/dev/null;";

    system(@cmd) == 0 or ::error(qq(Command -> @cmd failed: $?));
}

# Get database file name.
sub db_filename
{
    my ($basefile, $cachedir, $dbfile);

    $basefile = $opt::dest;
    $basefile =~ s/[^a-z0-9]/_/gi;
    $cachedir = $ENV{'HOME'}."/.bagop/cache";
    $dbfile = "$cachedir/$basefile";

    unless (-f $dbfile) {
        system("mkdir -p $cachedir; rsync $opt::dest/.$basefile $dbfile 2>/dev/null;");
    }

    return $dbfile;
}

# Retrieve the backup db from file.
sub db_retrieve
{
    my ($dbfile, $db);

    $dbfile = db_filename();
    $db     = (-f $dbfile) ? Storable::lock_retrieve($dbfile) : {};

    return wantarray ? %{$db} : $db;
}

# Output a warning.
sub warning
{
    my ($warning,   # warning message.
    ) = @_;

    my ($fh, $prog);

    $fh   = $Global::original_stderr || *STDERR;
    $prog = $Global::progname || $prg_name;

    print $fh $prog, ": Warning: ", $warning;
}

# Output an error and exit.
sub error
{
    my ($error,   # error message.
    ) = @_;

    my ($fh, $prog);

    $fh   = $Global::original_stderr || *STDERR;
    $prog = $Global::progname || $prg_name;

    print $fh $prog, ": Error: ", $error;

    exit(1);
}
